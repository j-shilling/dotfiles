#!/usr/bin/env sh
:; set -e # -*- mode: emacs-lisp; lexical-binding: t -*-
:; case "$EMACS" in *term*) EMACS=emacs ;; *) EMACS="${EMACS:-emacs}" ;; esac
:; $EMACS --version >/dev/null 2>&1 || { >&2 echo "Can't find emacs in your PATH"; exit 1; }
:; $EMACS --no-site-file --script "$0" -- "$@" || __EXITCODE=$?
:; exit $__EXITCODE

;; This file is inspired heavily by the doom emacs script:
;; https://github.com/hlissner/doom-emacs/blob/develop/bin/doom

;; The garbage collector isn't as important during CLI ops. A higher threshold
;; makes it 15-30% faster, but set it too high and we risk runaway memory usage
;; in longer sessions.
(setq gc-cons-threshold 134217728)   ; 128mb

;; Prioritize non-byte-compiled source files in non-interactive sessions to
;; prevent loading stale byte-code.
(setq load-prefer-newer t)

(require 'cl-seq)

(defconst this-file-name
  (or load-file-name
      (buffer-file-name))
  "The full path name of this file.")

(defun this-directory-name ()
  "The path of this file's directory."
  (file-name-directory this-file-name))

;; I don't want to assume that magit has been installed, so I'm going to copy
;; the needed functions here.

(defun git-executable ()
  "Return the path to `git' or throws an error."
  (or (executable-find "git")
      (error "Could not find git.")))

(defun process-git (destination &rest args)
  (apply #'process-file
            (git-executable)
            nil
            destination
            nil
            "-C"
            (this-directory-name)
            args))

(defun git-items (&rest args)
  "Return the output of a git process as a list separated by `\0'."
  (with-temp-buffer
    (apply #'process-git t args)
    (split-string (buffer-string) "\0" t)))

(defun git-files ()
  "Return a list of files tracked by git."
  (git-items "ls-files" "-z" "--full-name"))

(defun dotfiles ()
  "Return a list of files that should be symlinked as dotfiles."
  (cl-remove-if (lambda (el)
                  (let ((el-full-path (expand-file-name el (this-directory-name))))
                    (string= el-full-path this-file-name)))
                (git-files)))

(defun make-symlinks ()
  "Create symbolic links from dotfiles.

Iterate over each file tracked by git and create a symbolic link
to it within the current user's home directory. This is found
using the `HOME' environment variable."

  (dolist (file (dotfiles))
    (let ((target (expand-file-name file (this-directory-name)))
          (linkname (expand-file-name (concat "." file) (getenv "HOME"))))
      (message "Checking for %s... %s"
               target
               (if (file-exists-p linkname)
                   "yes"
                 (progn
                   (make-directory (file-name-directory linkname) t)
                   (make-symbolic-link target linkname)
                   "created"))))))

(defun download-oh-my-zsh-script ()
  (let ((oh-my-zsh-install-script
           "https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh"))
      (let ((cmd (cond ((executable-find "curl") (list (executable-find "curl") "-fsSl" oh-my-zsh-install-script))
                       ((executable-find "wget") (list (executable-find "wget") "-O-" oh-my-zsh-install-script))
                       ((executable-find "fetch") (list (executable-find "fetch") "-o" "-" oh-my-zsh-install-script))
                       (t (error "Cannot find program to download oh my zsh install script.")))))
        (with-temp-buffer
          (if (= 0 (apply #'process-file (car cmd) nil t nil (cdr cmd)))
              (buffer-string)
            (error (buffer-string)))))))

(defun ensure-oh-my-zsh ()
  (message "Checking for oh-my-zsh... %s"
           (if (file-exists-p (expand-file-name ".oh-my-zsh" (getenv "HOME")))
               "yes"
             (with-temp-buffer
               (if (= 0 (process-file "sh" nil t nil "-c" (download-oh-my-zsh-script)))
                   (delete-file (expand-file-name ".zshrc" (getenv "HOME")))
                 (error (buffer-string)))
               "installed"))))

(defun ensure-doom ()
  (let ((emacs-dir (expand-file-name ".emacs.d2" (getenv "HOME"))))
    (message "Checking for doom-emacs... %s"
             (if (file-exists-p emacs-dir)
                "yes"
              (with-temp-buffer
                (if (= 0 (process-git t "clone"
                                      "--depth"
                                      "1"
                                      "ttps://github.com/hlissner/doom-emacs"
                                      emacs-dir))
                    "installed"
                  (error (buffer-string))))))))

(ensure-oh-my-zsh)
(ensure-doom)
(make-symlinks)
