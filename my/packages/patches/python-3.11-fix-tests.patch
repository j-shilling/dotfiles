From 72ae7b61c7520121914846f468fbb584b6371285 Mon Sep 17 00:00:00 2001
From: Jake Shilling <shilling.jake@gmail.com>
Date: Sat, 15 Mar 2025 18:31:31 -0400
Subject: [PATCH] Fix tests

---
 Lib/ctypes/test/test_callbacks.py         | 3 +++
 Lib/ctypes/test/test_find.py              | 1 +
 Lib/ctypes/test/test_libc.py              | 3 +++
 Lib/distutils/tests/test_archive_util.py  | 2 ++
 Lib/distutils/tests/test_sdist.py         | 1 +
 Lib/test/_test_multiprocessing.py         | 2 ++
 Lib/test/test_asyncio/test_base_events.py | 2 ++
 Lib/test/test_generators.py               | 1 +
 Lib/test/test_pathlib.py                  | 1 +
 Lib/test/test_pdb.py                      | 4 ++--
 Lib/test/test_regrtest.py                 | 2 ++
 Lib/test/test_resource.py                 | 1 +
 Lib/test/test_shutil.py                   | 2 ++
 Lib/test/test_signal.py                   | 2 ++
 Lib/test/test_socket.py                   | 8 ++++++++
 Lib/test/test_spwd.py                     | 6 ++----
 Lib/test/test_tarfile.py                  | 9 ++++++---
 Lib/test/test_threading.py                | 3 +++
 Lib/test/test_unicodedata.py              | 1 +
 Tools/scripts/run_tests.py                | 2 +-
 20 files changed, 46 insertions(+), 10 deletions(-)

diff --git a/Lib/ctypes/test/test_callbacks.py b/Lib/ctypes/test/test_callbacks.py
index 5c514db..a5a6f76 100644
--- a/Lib/ctypes/test/test_callbacks.py
+++ b/Lib/ctypes/test/test_callbacks.py
@@ -6,6 +6,7 @@ from ctypes import *
 from ctypes.test import need_symbol
 from _ctypes import CTYPES_MAX_ARGCOUNT
 import _ctypes_test
+import platform
 
 class Callbacks(unittest.TestCase):
     functype = CFUNCTYPE
@@ -174,6 +175,8 @@ class SampleCallbacksTestCase(unittest.TestCase):
 
         self.assertLess(diff, 0.01, "%s not less than 0.01" % diff)
 
+    @unittest.skipIf(platform.machine() in ['mips64'],
+                     "This test fails on this platform")
     def test_issue_8959_a(self):
         from ctypes.util import find_library
         libc_path = find_library("c")
diff --git a/Lib/ctypes/test/test_find.py b/Lib/ctypes/test/test_find.py
index a41e949..08f181b 100644
--- a/Lib/ctypes/test/test_find.py
+++ b/Lib/ctypes/test/test_find.py
@@ -117,6 +117,7 @@ class FindLibraryLinux(unittest.TestCase):
         with unittest.mock.patch("ctypes.util._findSoname_ldconfig", lambda *args: None):
             self.assertNotEqual(find_library('c'), None)
 
+    @unittest.skipIf(True, "ldconfig is not used on Guix")
     def test_find_library_with_ld(self):
         with unittest.mock.patch("ctypes.util._findSoname_ldconfig", lambda *args: None), \
              unittest.mock.patch("ctypes.util._findLib_gcc", lambda *args: None):
diff --git a/Lib/ctypes/test/test_libc.py b/Lib/ctypes/test/test_libc.py
index 56285b5..c088ab3 100644
--- a/Lib/ctypes/test/test_libc.py
+++ b/Lib/ctypes/test/test_libc.py
@@ -2,6 +2,7 @@ import unittest
 
 from ctypes import *
 import _ctypes_test
+import platform
 
 lib = CDLL(_ctypes_test.__file__)
 
@@ -17,6 +18,8 @@ class LibTest(unittest.TestCase):
         import math
         self.assertEqual(lib.my_sqrt(2.0), math.sqrt(2.0))
 
+    @unittest.skipIf(platform.machine() in ['mips64'],
+                     "This test fails on this platform")
     def test_qsort(self):
         comparefunc = CFUNCTYPE(c_int, POINTER(c_char), POINTER(c_char))
         lib.my_qsort.argtypes = c_void_p, c_size_t, c_size_t, comparefunc
diff --git a/Lib/distutils/tests/test_archive_util.py b/Lib/distutils/tests/test_archive_util.py
index 66aee1b..42bbfa6 100644
--- a/Lib/distutils/tests/test_archive_util.py
+++ b/Lib/distutils/tests/test_archive_util.py
@@ -335,6 +335,7 @@ class ArchiveUtilTestCase(support.TempdirManager,
         self.assertEqual(os.path.basename(res), 'archive.tar.xz')
         self.assertEqual(self._tarinfo(res), self._created_files)
 
+    @unittest.skipIf(True, "getgrgid(0)[0] raises a KeyError on Guix")
     def test_make_archive_owner_group(self):
         # testing make_archive with owner and group, with various combinations
         # this works even if there's not gid/uid support
@@ -364,6 +365,7 @@ class ArchiveUtilTestCase(support.TempdirManager,
 
     @unittest.skipUnless(ZLIB_SUPPORT, "Requires zlib")
     @unittest.skipUnless(UID_GID_SUPPORT, "Requires grp and pwd support")
+    @unittest.skipIf(True, "getgrgid(0)[0] raises a KeyError on Guix")
     def test_tarfile_root_owner(self):
         tmpdir =  self._create_files()
         base_name = os.path.join(self.mkdtemp(), 'archive')
diff --git a/Lib/distutils/tests/test_sdist.py b/Lib/distutils/tests/test_sdist.py
index 58497fe..360318a 100644
--- a/Lib/distutils/tests/test_sdist.py
+++ b/Lib/distutils/tests/test_sdist.py
@@ -444,6 +444,7 @@ class SDistTestCase(BasePyPIRCCommandTestCase):
                      "The tar command is not found")
     @unittest.skipIf(find_executable('gzip') is None,
                      "The gzip command is not found")
+    @unittest.skipIf(True, "getgrgid(0)[0] raises a KeyError on Guix")
     def test_make_distribution_owner_group(self):
         # now building a sdist
         dist, cmd = self.get_cmd()
diff --git a/Lib/test/_test_multiprocessing.py b/Lib/test/_test_multiprocessing.py
index e096401..2df8d93 100644
--- a/Lib/test/_test_multiprocessing.py
+++ b/Lib/test/_test_multiprocessing.py
@@ -1694,6 +1694,7 @@ class _TestCondition(BaseTestCase):
         if pid is not None:
             os.kill(pid, signal.SIGINT)
 
+    @unittest.skipIf(True, "This fails for unknown reasons on Guix")
     def test_wait_result(self):
         if isinstance(self, ProcessesMixin) and sys.platform != 'win32':
             pid = os.getpid()
@@ -4188,6 +4189,7 @@ class _TestSharedMemory(BaseTestCase):
         sms.close()
 
     @unittest.skipIf(os.name != "posix", "not feasible in non-posix platforms")
+    @unittest.skipUnless(sys.stdin.isatty(), "KeyboardInterrupts require a TTY device")
     def test_shared_memory_SharedMemoryServer_ignores_sigint(self):
         # bpo-36368: protect SharedMemoryManager server process from
         # KeyboardInterrupt signals.
diff --git a/Lib/test/test_asyncio/test_base_events.py b/Lib/test/test_asyncio/test_base_events.py
index e1fc7e6..ad2ae5c 100644
--- a/Lib/test/test_asyncio/test_base_events.py
+++ b/Lib/test/test_asyncio/test_base_events.py
@@ -1346,6 +1346,8 @@ class BaseEventLoopWithSelectorTests(test_utils.TestCase):
         self._test_create_connection_ip_addr(m_socket, False)
 
     @patch_socket
+    @unittest.skipUnless(support.is_resource_enabled('network'),
+                         'network is not enabled')
     def test_create_connection_service_name(self, m_socket):
         m_socket.getaddrinfo = socket.getaddrinfo
         sock = m_socket.socket.return_value
diff --git a/Lib/test/test_generators.py b/Lib/test/test_generators.py
index 04c44c8..d4796e8 100644
--- a/Lib/test/test_generators.py
+++ b/Lib/test/test_generators.py
@@ -34,6 +34,7 @@ class SignalAndYieldFromTest(unittest.TestCase):
         else:
             return "FAILED"
 
+    @unittest.skipIf(True, 'Keyboard interrupts do not work in the Guix build environment')
     def test_raise_and_yield_from(self):
         gen = self.generator1()
         gen.send(None)
diff --git a/Lib/test/test_pathlib.py b/Lib/test/test_pathlib.py
index aaa2ade..5782664 100644
--- a/Lib/test/test_pathlib.py
+++ b/Lib/test/test_pathlib.py
@@ -2637,6 +2637,7 @@ class PosixPathTest(_BasePathTest, unittest.TestCase):
                          'pwd module does not expose getpwall()')
     @unittest.skipIf(sys.platform == "vxworks",
                      "no home directory on VxWorks")
+    @unittest.skipIf(True, "Guix builder home is '/' which causes trouble for these tests")
     def test_expanduser(self):
         P = self.cls
         import_helper.import_module('pwd')
diff --git a/Lib/test/test_pdb.py b/Lib/test/test_pdb.py
index d21ea9e..4ff8b24 100644
--- a/Lib/test/test_pdb.py
+++ b/Lib/test/test_pdb.py
@@ -1489,11 +1489,11 @@ def test_pdb_issue_20766():
     > <doctest test.test_pdb.test_pdb_issue_20766[0]>(6)test_function()
     -> print('pdb %d: %s' % (i, sess._previous_sigint_handler))
     (Pdb) continue
-    pdb 1: <built-in function default_int_handler>
+    pdb 1: Handlers.SIG_IGN
     > <doctest test.test_pdb.test_pdb_issue_20766[0]>(6)test_function()
     -> print('pdb %d: %s' % (i, sess._previous_sigint_handler))
     (Pdb) continue
-    pdb 2: <built-in function default_int_handler>
+    pdb 2: Handlers.SIG_IGN
     """
 
 def test_pdb_issue_43318():
diff --git a/Lib/test/test_regrtest.py b/Lib/test/test_regrtest.py
index 0a0c371..1b83523 100644
--- a/Lib/test/test_regrtest.py
+++ b/Lib/test/test_regrtest.py
@@ -1076,6 +1076,7 @@ class ArgsTestCase(BaseTestCase):
         output = self.run_tests('--fromfile', filename)
         self.check_executed_tests(output, tests, stats=stats)
 
+    @unittest.skipIf(True, 'Keyboard interrupts do not work in the Guix build environment.')
     def test_interrupted(self):
         code = TEST_INTERRUPTED
         test = self.create_test('sigint', code=code)
@@ -1093,6 +1094,7 @@ class ArgsTestCase(BaseTestCase):
                  % (self.TESTNAME_REGEX, len(tests)))
         self.check_line(output, regex)
 
+    @unittest.skipIf(True, 'Keyboard interrupts do not work in the Guix build environment.')
     def test_slowest_interrupted(self):
         # Issue #25373: test --slowest with an interrupted test
         code = TEST_INTERRUPTED
diff --git a/Lib/test/test_resource.py b/Lib/test/test_resource.py
index 317e7ca..7f272da 100644
--- a/Lib/test/test_resource.py
+++ b/Lib/test/test_resource.py
@@ -151,6 +151,7 @@ class ResourceTest(unittest.TestCase):
 
     @unittest.skipUnless(hasattr(resource, 'prlimit'), 'no prlimit')
     @support.requires_linux_version(2, 6, 36)
+    @unittest.skipIf(True, "Bug: the PermissionError is not raised")
     def test_prlimit(self):
         self.assertRaises(TypeError, resource.prlimit)
         self.assertRaises(ProcessLookupError, resource.prlimit,
diff --git a/Lib/test/test_shutil.py b/Lib/test/test_shutil.py
index 6728d30..b0b9fa5 100644
--- a/Lib/test/test_shutil.py
+++ b/Lib/test/test_shutil.py
@@ -1591,6 +1591,7 @@ class TestArchives(BaseTest, unittest.TestCase):
         base_name = os.path.join(tmpdir, 'archive')
         self.assertRaises(ValueError, make_archive, base_name, 'xxx')
 
+    @unittest.skipIf(True, "The Guix build container has no root user")
     @support.requires_zlib()
     def test_make_archive_owner_group(self):
         # testing make_archive with owner and group, with various combinations
@@ -1619,6 +1620,7 @@ class TestArchives(BaseTest, unittest.TestCase):
         self.assertTrue(os.path.isfile(res))
 
 
+    @unittest.skipIf(True, "The Guix build container has no root user")
     @support.requires_zlib()
     @unittest.skipUnless(UID_GID_SUPPORT, "Requires grp and pwd support")
     def test_tarfile_root_owner(self):
diff --git a/Lib/test/test_signal.py b/Lib/test/test_signal.py
index 3711e7d..03b44dc 100644
--- a/Lib/test/test_signal.py
+++ b/Lib/test/test_signal.py
@@ -1415,6 +1415,7 @@ class StressTest(unittest.TestCase):
 
 class RaiseSignalTest(unittest.TestCase):
 
+    @unittest.skipUnless(sys.stdin.isatty(), "KeyboardInterrupts require a TTY device")
     def test_sigint(self):
         with self.assertRaises(KeyboardInterrupt):
             signal.raise_signal(signal.SIGINT)
@@ -1460,6 +1461,7 @@ class RaiseSignalTest(unittest.TestCase):
 
 class PidfdSignalTest(unittest.TestCase):
 
+    @unittest.skipUnless(sys.stdin.isatty(), "KeyboardInterrupts require a TTY device")
     @unittest.skipUnless(
         hasattr(signal, "pidfd_send_signal"),
         "pidfd support not built in",
diff --git a/Lib/test/test_socket.py b/Lib/test/test_socket.py
index 42adc57..475b7a9 100644
--- a/Lib/test/test_socket.py
+++ b/Lib/test/test_socket.py
@@ -1003,6 +1003,8 @@ class GeneralModuleTests(unittest.TestCase):
         if not fqhn in all_host_names:
             self.fail("Error testing host resolution mechanisms. (fqdn: %s, all: %s)" % (fqhn, repr(all_host_names)))
 
+    @unittest.skipUnless(support.is_resource_enabled('network'),
+                         'network is not enabled')
     def test_host_resolution(self):
         for addr in [socket_helper.HOSTv4, '10.0.0.1', '255.255.255.255']:
             self.assertEqual(socket.gethostbyname(addr), addr)
@@ -1148,6 +1150,8 @@ class GeneralModuleTests(unittest.TestCase):
             self.assertRaises(OverflowError, socket.ntohl, k)
             self.assertRaises(OverflowError, socket.htonl, k)
 
+    @unittest.skipUnless(os.path.exists("/etc/services"),
+                         "getservbyname uses /etc/services, which is not in the chroot")
     def testGetServBy(self):
         eq = self.assertEqual
         # Find one service that exists, then check all the related interfaces.
@@ -1508,6 +1512,8 @@ class GeneralModuleTests(unittest.TestCase):
             raise
         self.assertRaises(TypeError, s.ioctl, socket.SIO_LOOPBACK_FAST_PATH, None)
 
+    @unittest.skipUnless(os.path.exists("/etc/gai.conf"),
+                         "getaddrinfo() will fail")
     def testGetaddrinfo(self):
         try:
             socket.getaddrinfo('localhost', 80)
@@ -1592,6 +1598,8 @@ class GeneralModuleTests(unittest.TestCase):
         # only IP addresses are allowed
         self.assertRaises(OSError, socket.getnameinfo, ('mail.python.org',0), 0)
 
+    @unittest.skipUnless(os.path.exists("/etc/gai.conf"),
+                         "getaddrinfo() will fail")
     @unittest.skipUnless(support.is_resource_enabled('network'),
                          'network is not enabled')
     def test_idna(self):
diff --git a/Lib/test/test_spwd.py b/Lib/test/test_spwd.py
index 50766c2..0c7eb7a 100644
--- a/Lib/test/test_spwd.py
+++ b/Lib/test/test_spwd.py
@@ -9,8 +9,7 @@ with warnings.catch_warnings():
     spwd = import_helper.import_module('spwd')
 
 
-@unittest.skipUnless(hasattr(os, 'geteuid') and os.geteuid() == 0,
-                     'root privileges required')
+@unittest.skipUnless(os.path.exists("/etc/shadow"), 'spwd tests require /etc/shadow')
 class TestSpwdRoot(unittest.TestCase):
 
     def test_getspall(self):
@@ -60,8 +59,7 @@ class TestSpwdRoot(unittest.TestCase):
             self.assertRaises(TypeError, spwd.getspnam, bytes_name)
 
 
-@unittest.skipUnless(hasattr(os, 'geteuid') and os.geteuid() != 0,
-                     'non-root user required')
+@unittest.skipUnless(os.path.exists("/etc/shadow"), 'spwd tests require /etc/shadow')
 class TestSpwdNonRoot(unittest.TestCase):
 
     def test_getspnam_exception(self):
diff --git a/Lib/test/test_tarfile.py b/Lib/test/test_tarfile.py
index 389da7b..58c5eaf 100644
--- a/Lib/test/test_tarfile.py
+++ b/Lib/test/test_tarfile.py
@@ -2864,9 +2864,12 @@ def root_is_uid_gid_0():
         import pwd, grp
     except ImportError:
         return False
-    if pwd.getpwuid(0)[0] != 'root':
-        return False
-    if grp.getgrgid(0)[0] != 'root':
+    try:
+        if pwd.getpwuid(0)[0] != 'root':
+            return False
+        if grp.getgrgid(0)[0] != 'root':
+            return False
+    except KeyError:
         return False
     return True
 
diff --git a/Lib/test/test_threading.py b/Lib/test/test_threading.py
index ec6a319..83d0253 100644
--- a/Lib/test/test_threading.py
+++ b/Lib/test/test_threading.py
@@ -1739,6 +1739,7 @@ class InterruptMainTests(unittest.TestCase):
             # Restore original handler
             signal.signal(signum, handler)
 
+    @unittest.skipIf(True, 'Keyboard interrupts do not work in the Guix build container.')
     def test_interrupt_main_subthread(self):
         # Calling start_new_thread with a function that executes interrupt_main
         # should raise KeyboardInterrupt upon completion.
@@ -1750,6 +1751,8 @@ class InterruptMainTests(unittest.TestCase):
             t.join()
         t.join()
 
+
+    @unittest.skipIf(True, 'Keyboard interrupts do not work in the Guix build container.')
     def test_interrupt_main_mainthread(self):
         # Make sure that if interrupt_main is called in main thread that
         # KeyboardInterrupt is raised instantly.
diff --git a/Lib/test/test_unicodedata.py b/Lib/test/test_unicodedata.py
index c02d15d..402ec43 100644
--- a/Lib/test/test_unicodedata.py
+++ b/Lib/test/test_unicodedata.py
@@ -324,6 +324,7 @@ class UnicodeMiscTest(UnicodeDatabaseTest):
                 self.assertEqual(len(lines), 1,
                                  r"\u%.4x should not be a linebreak" % i)
 
+@requires_resource('network')
 class NormalizationTest(unittest.TestCase):
     @staticmethod
     def check_version(testfile):
diff --git a/Tools/scripts/run_tests.py b/Tools/scripts/run_tests.py
index 445a34a..8f75053 100644
--- a/Tools/scripts/run_tests.py
+++ b/Tools/scripts/run_tests.py
@@ -69,7 +69,7 @@ def main(regrtest_args):
         else:
             args.extend(['-j', '0'])  # Use all CPU cores
     if not any(is_resource_use_flag(arg) for arg in regrtest_args):
-        args.extend(['-u', 'all,-largefile,-audio,-gui'])
+        args.extend(['-u', 'all,-largefile,-audio,-gui,-network'])
 
     if cross_compile and hostrunner:
         # If HOSTRUNNER is set and -p/--python option is not given, then
-- 
2.48.1

